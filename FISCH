
local validKeys = {
    "NIGGERBLACKMUNGKORN",
    "NIGERRRRR",
    "black",
    "soblackbytheway"
}

local function gethwid()
    return tostring(game:GetService("RbxAnalyticsService"):GetClientId())
end

local function create_folder(folder_path)
    if not isfolder(folder_path) then
        makefolder(folder_path)
    end
end

local function save_data(folder_path, key, userId)
    local file_path = folder_path .. "/" .. key .. ".txt"
    writefile(file_path, "Key: " .. key .. "\nUserId: " .. userId .. "\nHWID: " .. gethwid())
end

local function load_data(folder_path, key)
    local file_path = folder_path .. "/" .. key .. ".txt"
    if isfile(file_path) then
        local data = readfile(file_path)
        local savedUserId = string.match(data, "UserId: (%d+)")
        return savedUserId
    end
    return nil
end

local function isKeyValid(key)
    for _, validKey in ipairs(validKeys) do
        if key == validKey then
            return true
        end
    end
    return false
end

local function handlePlayerAccess()
    local userId = tostring(game:GetService("Players").LocalPlayer.UserId)
    local savedUserId = load_data("KeyData", _G.KEY)
    local hwid = gethwid()

    if savedUserId == nil then
        _G.SAVED_USER_ID = userId
        print("Key saved for user ID: " .. userId)
        create_folder("KeyData")
        save_data("KeyData", _G.KEY, userId)
        game:GetService("Players").LocalPlayer:Kick("KEY SAVE. Please rejoin.")
    elseif savedUserId == userId then
    local Players = game:GetService("Players")
    local Player = Players.LocalPlayer
    local VirtualInputManager = game:GetService("VirtualInputManager")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local PlayerGui = Player:WaitForChild("PlayerGui")

    local Client = {}

    Client.AntiAFK = function()
        if Player and Player.Idled then
            for _, connection in pairs(getconnections(Player.Idled)) do
                connection:Disable()
            end
        end
    end

    Client.AntiAFK()

    _Hawk = "ohhahtuhthttouttpwuttuaunbotwo"

    local Hawk = loadstring(game:HttpGet("https://raw.githubusercontent.com/MynameIsDoit/HAWKLIB/refs/heads/main/main.lua", true))()

    local Window = Hawk:Window({
        ScriptName = "Doit HUB (FISCH)",
        DestroyIfExists = true,
        Theme = "Dark"
    })

    Window:Close({
        visibility = true,
        Callback = function()
            Window:Destroy()
        end
    })

    Window:Minimize({
        visibility = true,
        OpenButton = true,
        Callback = function() end,
    })

    local tab1 = Window:Tab("Main")
    local tab2 = Window:Tab("Setting")

    local newsec = tab1:Section("Position")
    newsec:UpdateSection("Position")

    local cframeLabel = newsec:Label("Position", "No Position")

    newsec:Button("Save Position", "Save your Position", function()
        local character = Player.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            _G.LoopCFrame = character.HumanoidRootPart.CFrame

            local position = _G.LoopCFrame.Position
            local roundedPosition = string.format("X: %d, Y: %d, Z: %d", position.X, position.Y, position.Z)

            cframeLabel:UpdateLabel("Position", roundedPosition)
        else
            cframeLabel:UpdateLabel("Position", "HumanoidRootPart not found!")
        end
    end)

    local newsec = tab1:Section("AutoFarm")
    newsec:UpdateSection("AutoFarm")

    newsec:Toggle("Auto Shake", false, function(Value)
        _G.autoshake = Value
    end)

    newsec:Toggle("Auto Cast", false, function(Value)
        _G.cast = Value
        _G.loopteleport = Value
    end)

    newsec:Toggle("Auto Reel", false, function(Value)
        _G.reel = Value
    end)

    local clickCount = 0
    local cframeLabel = newsec:Label("Shake times", "Shakes: 0")

    local function performClick(posX, posY)
        VirtualInputManager:SendMouseButtonEvent(posX, posY, 0, true, game, 0)
        VirtualInputManager:SendMouseButtonEvent(posX, posY, 0, false, game, 0)
        clickCount = clickCount + 1
        cframeLabel:UpdateLabel("Shake times", "Shakes: " .. tostring(clickCount))
    end

    local function resetClickCount()
        clickCount = 0
        cframeLabel:UpdateLabel("Shake times", "Shakes: 0")
    end

    local misc = tab2:Section("Misc")
    misc:UpdateSection("Setting")

    local slider = misc:Slider("Shake Speed",0,1,function(value)
        ShakeSpeed = value
    end)

    misc:Toggle("Shake Faster", false, function(Value)
        _G.shakefaster = Value
    end)

    misc:Toggle("Button Middle", false, function(Value)
        _G.buttonMiddle = Value
    end)

    slider:SetValue(0.01)

    spawn(function()
        while task.wait(0.25) do
            if _G.loopteleport then
                local character = Player.Character
                if character and character:FindFirstChild("HumanoidRootPart") and _G.LoopCFrame then
                    character.HumanoidRootPart.CFrame = _G.LoopCFrame
                end
            end
        end
    end)

    spawn(function()
        while task.wait(ShakeSpeed) do
            if _G.autoshake then
                local shakeUI = PlayerGui:FindFirstChild("shakeui")
                local safezone = shakeUI and shakeUI:FindFirstChild("safezone")
                local button = safezone and safezone:FindFirstChild("button")
                if button then
                    if _G.buttonMiddle then
                        button.AnchorPoint = Vector2.new(0.5, 0.5)
                        button.Position = UDim2.new(0.5, 0, 0.5, 0)
                    end
                    if button.Visible then
                        local posX = button.AbsolutePosition.X + button.AbsoluteSize.X / 2
                        local posY = button.AbsolutePosition.Y + button.AbsoluteSize.Y / 2
                        task.defer(function()
                            performClick(posX, posY)
                        end)
                    end
                end
            end
            if _G.shakefaster then
                local shakeUI = PlayerGui:FindFirstChild("shakeui")
                local safezone = shakeUI and shakeUI:FindFirstChild("safezone")
                local button = safezone and safezone:FindFirstChild("button")
                if button and button.Visible then
                    local posX = button.AbsolutePosition.X + button.AbsoluteSize.X / 2
                    local posY = button.AbsolutePosition.Y + button.AbsoluteSize.Y / 2
                    task.defer(function()
                        performClick(posX, posY)
                        performClick(posX, posY)
                    end)
                end
            end
            local reelUI = PlayerGui:FindFirstChild("reel")
            if reelUI then
                local reelBar = reelUI:FindFirstChild("bar")
                if reelBar and not reelBar.Visible then
                    task.defer(resetClickCount)
                end
            end
        end
    end)

    local utility = {
        blacklistedAttachments = {"bob", "bodyweld"}
    }

    function utility.removeInvalidAttachments(bobber)
        for _, value in ipairs(bobber:GetDescendants()) do
            if value:IsA("Attachment") and table.find(utility.blacklistedAttachments, value.Name) then
                value:Destroy()
            end
        end
    end

    local farm = {}

    function farm.findRod()
        local character = Player.Character
        if not character then return nil end

        for _, tool in ipairs(character:GetChildren()) do
            if tool:IsA("Tool") and (tool.Name:find("rod") or tool.Name:find("Rod")) then
                return tool
            end
        end
        return nil
    end

    spawn(function()
        while task.wait() do
            if _G.cast then
                local rod = farm.findRod()
                if rod and rod:FindFirstChild("events") and rod.events:FindFirstChild("cast") then
                    local args = { [1] = 100, [2] = 1 }
                    rod.events.cast:FireServer(unpack(args))
                end
            end
        end
    end)

    local function fireReelFinished(update_colors, count)
        if not update_colors then return end
        
        local value = getupvalue(update_colors, 1) 
        for _ = 1, count do
            ReplicatedStorage.events.reelfinished:FireServer(value, true)
        end
    end

    spawn(function()
        while task.wait() do
            if _G.reel then
                local reel_ui = PlayerGui:FindFirstChild("reel")
                if reel_ui then
                    local reel_bar = reel_ui:FindFirstChild("bar")
                    if reel_bar then
                        local reel_client = reel_bar:FindFirstChild("reel")
                        if reel_client then
                            if reel_client.Disabled then
                                reel_client.Disabled = false
                            end

                            local update_colors = getsenv(reel_client).UpdateColors
                            if update_colors then
                                setupvalue(update_colors, 1, 100)
                                fireReelFinished(update_colors, 1) 
                            end
                        end
                    end
                end
            end
        end
    end)
    else
        game:GetService("Players").LocalPlayer:Kick("Incorrect USERID. You are not authorized to use this script.")
    end
end

-- Check the key and handle access
if isKeyValid(_G.KEY) then
    handlePlayerAccess()
else
    game:GetService("Players").LocalPlayer:Kick("Invalid key. You are not authorized to use this script.")
end
